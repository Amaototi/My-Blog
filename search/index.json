[{"content":"Arch Linuxでwaylandを使いたい！ という思いつきで色々自分で調べながら試したので、その備忘録です。\n⚠注意⚠ 今回はNVIDIAのGPUを使っていません。NVIDIAのGPUを使う場合はまた違う操作が必要になるので、ArchWikiで確認してください。\n環境    名称 構成     CPU Ryzen 5 5500U   GPU AMD Radeon Graphics   OS Arch Linux x86_64   デスクトップ環境 Plasma   ディスプレイマネージャー sddm    パッケージのインストール Plasmaのwaylandパッケージをインストール PlasmaでWaylandを使用するためには追加でplasma-wayland-sessionというパッケージをインストールする必要があります。インストールしていない場合はインストールしてください。\n1  $ pacman -S plasma-wayland-session   sddmの切り替え 通常のsddmパッケージではwaylandを動かすことができないので、AURパッケージであるsddm-gitに切り替えます。\n1 2 3 4  $ pacman -S sddm-git looking for conflicting packages... :: sddm-git and sddm are in conflict. Remove sddm? [y/N] y # sddmをsddm-gitに置き換える ...   コンポジタ コンポジタとして、KDEのKwinをインストールします。\n1  $ pacman -S KWin   設定ファイルの作成 waylandで動かすために新たに設定ファイルを/etc/sddm.conf.d/の下に作成します。ファイル名は/etc/sddm.conf.d/10-wayland.confとしてください。また、ディレクトリが存在しない場合は作成してください。\n1 2 3 4 5 6  [General] DisplayServer=wayland GreeterEnvironment=QT_WAYLAND_SHELL_INTEGRATION=layer-shell [Wayland] CompositorCommand=kwin_wayland --no-lockscreen   ファイルを保存したら再起動します。\nWaylandでの起動 ログイン画面になったら、画面左上にあるプルダウンリストからWaylandを選択しそのままログインします。するとWaylandで起動することができます。\nデバッグツール KWinを使用している場合、以下のコマンドを実行することでどのアプリケーションがWaylandで実行されているかの確認を行えます。\n1  $ qdbus org.kde.KWin /KWin org.kde.KWin.showDebugConsole   最後に 意外と簡単にWaylandへの移行が行えていい感じでした。\n参考文献  Wayland - ArchWiki KDE - ArchWiki SDDM -ArchWiki  ","date":"2023-05-09T15:17:12+09:00","image":"https://blog.amaototi.dev/p/archlinux-wayland/Wayland_Logo_hu14782f40a0021172f7631961041fdba8_53878_120x120_fill_box_smart1_3.png","permalink":"https://blog.amaototi.dev/p/archlinux-wayland/","title":"Arch LinuxのKDEでX11からWaylandに切り替えてみた"},{"content":"はじめに 勢いでこのブログを作成したので、いろんな壁にぶち当たりながらなんとか作成した感じになっています。 作った当日にこのブログを書くことでなるべく、忘れないうちに備忘録として残しておけるようにしたいって感じですかね。 まぁあとはきっと他の誰かが見て参考にしてくれたら嬉しいなの気持ちもちょっとあったりしたり。\n環境  Arch Linux x86_64 hugo v0.111.3+extended linux/amd64 BuildDate=unknown git version 2.40.1 GitHub Pages  Hugoのインストール 自分はArch Linuxの環境だったので、以下のコマンドでインストール。\n1  $ pacman -S hugo   他のOSを使っている人は、難しいものでもないので公式HPから確認してください。\nインストールが終わったら今度は、hugo new site \u0026lt;string\u0026gt;で新たにディレクトリごとページを作成。\n1 2 3 4 5 6 7 8 9 10 11 12 13  $ hugo new site test Congratulations! Your new Hugo site is created in /home/amaototi/test. Just a few more steps and you\u0026#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command. 2. Perhaps you want to add some content. You can add single files with \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 3. Start the built-in live server via \u0026#34;hugo server\u0026#34;. Visit https://gohugo.io/ for quickstart guide and full documentation.   テーマの設定 Hugoはテーマを自由に決めることができるとてもカスタマイズ性の高いフレームワークなので、自分で好みのテーマを探すと良いです。 自分はStackというテーマに。テーマはこちらからどうぞ。\nテーマを決めたらgit initからのgit submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stackでテーマをインストール。ここは各自選んだテーマのドキュメントを確認してください。\nインストールができたら、themes/hugo-themes-stack/examplesの中にあるconfig.yamlとcontent/を先程作成したディレクトリ直下にコピー。その際、config.tomlは削除します。\nここまで終わった状態でhugo server -Dをして、http://localhost:1313/にアクセスすると、、、\nといった感じで動きます。感動。 そしたら次はカスタマイズをしてきます。\nと言ってもやることは、不必要なexampleを消すのと、config.yamlの編集を行うだけ。\n変更点  languageCodeとDefaultContentLnaguageをjaに publishDir: docsをどっか適当に追記 parms内部  sidebarの中身全般  emojiはアイコンの右下にちっちゃくつくやつ   articleの中身ちょっと  mathは数学の記法をつかえるようにするかどうか tocは目次の表示非表示 readingTimeは読了時間の表示 licenseはライセンスの表示     menu内部  socialの中身  GitHubとTwitterのリンクを追加      だいたいこの程度の変更。あとは、公式ドキュメントを読んだり、先人たちの知恵を借りたりという感じ。\nGitHub Pagesに登録 GitHub Pagesを使うことで無料で公開することができるとのことだったので実践。\nGitHubでリポジトリを作成し、Settings \u0026gt; Pagesから設定を行い公開する。 この際、config.yamlのbaseurlをhttps://\u0026lt;username\u0026gt;.github.io/\u0026lt;repoの名前\u0026gt;に変更することを忘れずに行うこと。\nまた、カスタムドメインにする際も、同様にbaseurlをちゃんと設定してあげないとバグるので要注意。\nまとめ 思ってたよりも数倍簡単にブログを作れて良かったなというお気持ち。\n今度は、勝手にpushとかしてくれるようにしたいな。\n","date":"2023-05-03T09:08:51+09:00","image":"https://blog.amaototi.dev/p/make_blog/hugo_logo_huf6171ab9e39e99b8563bb3587a747fa8_37967_120x120_fill_box_smart1_3.png","permalink":"https://blog.amaototi.dev/p/make_blog/","title":"Hugoでブログを作成した件"},{"content":"ブログを作りました なんとなく作りたいなと思ったので勝手に深夜テンションで作成してみた。勢いでドメインを購入し、詳しい人にどうすればよいか話を聞き、自分でフレームワークを探してごちゃごちゃしてみるという経験をしたが、とても良かった✌\n後でこのブログを作るのにあたって苦労した点をまとめたいなと。\n環境  Hugo\n静的サイトジェネレータのHugoでサイトを作成してみた。まぁ結構簡単に作れたと思う。他の個人ブログ様々です。 GitHub Pages\nGitHubにて無料でサイトを公開できる機能(?)を使ってみた。まぁ結構いいかも。 Google Domain\nドメインの取得に使ったサイト。天下のGoogle様にお世話になりましたとさ。  参考文献  HUGO  https://gohugo.io/ 最終閲覧: 2023-03-05\nこのサイトのフレームワークです。   Stack  https://stack.jimmycai.com/ 最終閲覧: 2023-03-05\nこのブログで採用しているhugoのテーマです。オシャンティーだね。   hugoを使って爆速でブログを作成する  https://zenn.dev/harachan/articles/a043e9a756cae4 最終閲覧: 2023-05-03\n日本語の情報があって助かったよね。   非エンジニアの初心者がHugo(テーマStack)+GitHub Pagesでブログを開設するまで  https://miiitomi.github.io/p/hugo/ 最終閲覧: 2023-05-03\n結構参考にした。自分が使いたいテーマを使っていたので、めっちゃ助かりました。神。    まとめ 2, 3時間で完成まで持っていけたのはすごくいい感じだった。それに、Markdownで書けるってだけで圧倒的優勝みたいなところはある。\n日常的なこととか、簡単な技術的な話はここに書くことにします。今までほとんど書いたことないけどね。\n","date":"2023-05-03T06:00:36+09:00","image":"https://blog.amaototi.dev/p/my_first_blog/my_cat_huf5ef1bbf1eff6059901eecf33189f6a0_515925_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.amaototi.dev/p/my_first_blog/","title":"ブログが完成した"}]